install.packages(RevoUtilsMath)
install.packages('RevoUtilsMath')
read.csv('C:\Users\capn morgan\OneDrive\Docs\Python\Git Repo\my-work\Python for Data Science and Machine Learning\Self-sourced Exercises\ISLR Exercises\Chapter 2\College.csv')
read.csv('C:\\Users\\capn morgan\OneDrive\Docs\Python\Git Repo\my-work\Python for Data Science and Machine Learning\Self-sourced Exercises\ISLR Exercises\Chapter 2\College.csv')
read.csv('C:\\Users\\capn morgan\\OneDrive\\Docs\\Python\\Git Repo\\my-work\\Python for Data Science and Machine Learning\\Self-sourced Exercises\\ISLR Exercises\\Chapter 2\\College.csv')
college = read.csv('C:\\Users\\capn morgan\\OneDrive\\Docs\\Python\\Git Repo\\my-work\\Python for Data Science and Machine Learning\\Self-sourced Exercises\\ISLR Exercises\\Chapter 2\\College.csv')
college.fix()
fix(college)
rownames(college)=[,1]
rownames(college)=college[,1]
fix(college)
college=college[,-1]
fix(college)
summary(college)
pairs(college[,1:10])
pairs(college[,'Outside''Private])
fix(college)
plot(x=college['Outstate'],y=college['Private'])
fix(college)
plot(x=college[,1],y=college[,9]
plot(x=college[,1],y=college[,9])
Elite=rep("No",nrow(college))
Elite[college$Top10perc >50]='Yes'
Elite=as.factor(Elite)
college=data.frame(college,Elite)
summary(college)
plot(x=college[,9],y=college[,19])
plot(x=college[,9],y=college[,20])
plot(x=college[,9],y=college[,18])
fix(college)
plot(x=college[,19],y=college[,9])
hist(x=college[,19],y=college[,9])
hist(x=college[,2],y=college[,3])
hist(plot = x=college[,2],y=college[,3])
hist(college$Apps)
par(mfrow=c(2,2))
hist(college$Accept)
hist(college$Books)
hist(college$Personal)
hist(college$PhD
hist(college$PhD)
plot(x=college[,19],y=college[,9])
plot(x=college[,1],y=college[,9])
par(mfrow=c(1))
par(mfrow=c(1,1))
plot(x=college[,1],y=college[,9])
plot(x=college[,1],y=college[,9],xlab='No of Private Colleges')
plot(x=college[,19],y=college[,9],xlab='No of Elite Colleges')
rm(list=ls())
setwd('C:\\Users\\capn morgan\\OneDrive\\Docs\\Python\\Git Repo\\my-work\\Python for Data Science and Machine Learning\\Self-sourced Exercises\\ISLR Exercises')
Auto = read.table('Auto.data')
fix(Auto)
Auto = read.table('Auto.data',header=T,na.strings = '?')
fix(Auto)
dim(Auto)
Auto=na.omit(Auto)
dim(Auto)
names(Auto)
fix(Auto)
range(Auto)
fix(Auto)
sapply(Auto[,1:7], range())
sapply(Auto[,1:7], range
sapply(Auto[,1:7], range)
sapply(Auto[,1:7], mean)
sapply(Auto[,1:7], std)
sapply(Auto[,1:7], sd)
Edited = Auto[-10:-85,]
fix(Edited)
fix(Auto)
fix(Edited)
sapply(Edited[,1:7], range)
sapply(Edited[,1:7], mean)
sapply(Edited[,1:7], sd)
fix(Auto)
attach(Auto)
plot(cylinders,mpg)
par(mfrow=c(2,2))
plot(cylinders,mpg)
plot(displacement,mpg)
plot(horsepower,mpg)
plot(weight,mpg)
plot(acceleration,mpg)
plot(cylinders,mpg)
plot(horsepower,mpg)
plot(weight,mpg)
plot(year,mpg)
par(mfrow=c(2,3))
plot(cylinders,mpg)
plot(displacement,mpg)
plot(horsepower,mpg)
plot(weight,mpg)
plot(acceleration,mpg)
plot(year,mpg)
plot(cars)
plot(cars)
View(Edited)
> par(mfrow=c(2,3))
par(mfrow=c(2,3))
plot(cylinders,mpg)
plot(displacement,mpg)
plot(horsepower,mpg)
plot(weight,mpg)
plot(acceleration,mpg)
plot(year,mpg)
plot(cars)
plot(cars)
par(mfrow=c(2,3))
plot(cylinders,mpg)
plot(displacement,mpg)
plot(horsepower,mpg)
plot(weight,mpg)
plot(acceleration,mpg)
plot(year,mpg)
plot(cars)
plot(cars)
par(mfrow=c(2,3))
plot(cylinders,mpg)
plot(displacement,mpg)
plot(horsepower,mpg)
plot(weight,mpg)
plot(acceleration,mpg)
plot(year,mpg)
plot(cars)
plot(cars)
ls()
dev.off()
dev.list()
par(mfrow=c(2,3))
plot(cylinders,mpg)
plot(displacement,mpg)
plot(horsepower,mpg)
plot(weight,mpg)
plot(acceleration,mpg)
plot(year,mpg)
plot(cars)
plot(cars)
View(Edited)
library(MASS)
par(mfrow=c(2,3))
plot(cylinders,mpg)
Auto = read.table('Auto.data')
Auto = read.table('Auto.data',header=T,na.strings = '?')
dim(Auto)
Auto=na.omit(Auto)
dim(Auto)
names(Auto)
sapply(Auto[,1:7], range)
sapply(Auto[,1:7], mean)
sapply(Auto[,1:7], sd)
Edited = Auto[-10:-85,]
fix(Edited)
sapply(Edited[,1:7], range)
sapply(Edited[,1:7], mean)
sapply(Edited[,1:7], sd)
par(mfrow=c(2,3))
plot(cylinders,mpg)
Auto = read.table('Auto.data')
Auto = read.table('Auto.data',header=T,na.strings = '?')
dim(Auto)
Auto=na.omit(Auto)
dim(Auto)
names(Auto)
sapply(Auto[,1:7], range)
sapply(Auto[,1:7], mean)
sapply(Auto[,1:7], sd)
Edited = Auto[-10:-85,]
sapply(Edited[,1:7], range)
sapply(Edited[,1:7], mean)
sapply(Edited[,1:7], sd)
attach(Auto)
par(mfrow=c(2,3))
plot(cylinders,mpg)
plot(displacement,mpg)
plot(horsepower,mpg)
plot(weight,mpg)
plot(acceleration,mpg)
plot(year,mpg)
plot(cars)
plot(cars)
Auto = read.table('Auto.data')
Auto = read.table('Auto.data',header=T,na.strings = '?')
dim(Auto)
Auto=na.omit(Auto)
dim(Auto)
names(Auto)
sapply(Auto[,1:7], range)
sapply(Auto[,1:7], mean)
sapply(Auto[,1:7], sd)
Edited = Auto[-10:-85,]
sapply(Edited[,1:7], range)
sapply(Edited[,1:7], mean)
sapply(Edited[,1:7], sd)
attach(Auto)
par(mfrow=c(2,3))
plot(cylinders,mpg)
plot(displacement,mpg)
plot(horsepower,mpg)
plot(weight,mpg)
plot(acceleration,mpg)
plot(year,mpg)
library(MASS)
install.packages('MASS')
library(MASS)
library(MASS)
?Boston
fix(Boston)
pairs(Boston)
library(MASS)
?Boston
#The Boston data frame has 506 rows and 14 columns.
attach(Boston)
library(MASS)
?Boston
#The Boston data frame has 506 rows and 14 columns.
attach(Boston)
plot(crim,rm)
plot(rm,crim)
library(MASS)
?Boston
#The Boston data frame has 506 rows and 14 columns.
attach(Boston)
plot(nox,crim)
library(MASS)
?Boston
#The Boston data frame has 506 rows and 14 columns.
attach(Boston)
par(mfrow=(2,3))
library(MASS)
?Boston
#The Boston data frame has 506 rows and 14 columns.
attach(Boston)
par(mfrow=c(2,3))
library(MASS)
?Boston
#The Boston data frame has 506 rows and 14 columns.
attach(Boston)
par(mfrow=c(2,3))
plot(rm,crim)
plot(nox,crim)
plot(black,crim)
plot(ptratio,crim)
plot(age,crim)
plot(dis,crim)
par(mfrow=c(2,3))
plot(rm,crim)
plot(nox,crim)
plot(black,crim)
plot(ptratio,crim)
plot(age,crim)
plot(dis,crim)
